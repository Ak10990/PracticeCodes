package com.java.sample;

import org.junit.Test;

import java.io.BufferedReader;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;
//import java.util.Scanner;

//import java.io.BufferedReader;
//import java.io.InputStreamReader;

/**
 * Example local unit test, which will execute on the development machine (host).
 *
 * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
 */
public class ExampleUnitTest {
    /*@Test
    public void addition_isCorrect() throws Exception {
        assertEquals(4, 2 + 2);
    }*/
    public void addition_isCorrect() {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int arr[] = new int[n];
        int a[] = new int[n];
        int i, j, max = 0, val;

        for (i = 0; i < n; i++) {
            arr[i] = in.nextInt();
            a[i] = 1;
        }

        for (i = n - 2; i >= 0; i--) {
            for (j = n - 1; j >= i; j--)
                if (arr[i] < arr[j] && a[i] < a[j] + 1) {
                    a[i] = a[i] + 1;
                }
        }
        for (i = 0; i < n; i++)
            if (a[max] < a[i])
                max = i;

        System.out.println(a[max]);
        val = arr[max];
        System.out.println(val);
        for (i = max; i < arr.length; i++) {
            if (arr[i] > val) {
                System.out.println(arr[i]);
                val = arr[i];
            }
        }

    }

    @Test
    public void input() throws Exception {
//        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
//        char[] ch = br.readLine().toCharArray();
//        int N = Integer.parseInt(line);
//        while( (line = buffIn.readLine()) != null) {
//            everything.append(line);
//        }
       /* timeConverter("07:05:45PM");
        timeConverter("07:05:45AM");
        timeConverter("12:05:45AM");
        timeConverter("12:05:45PM");*/
        /*rotateSimple(3, 2, 3, new int[]{1, 2, 3}, new int[]{0, 1, 2, 3});
        System.out.println();
        rotateSimple(4, 2, 4, new int[]{1, 2, 3, 4}, new int[]{0, 1, 2, 3});
        System.out.println();
        rotateSimple(6, 4, 6, new int[]{1, 2, 3, 4, 5, 6}, new int[]{0, 1, 2, 3, 4, 5, 6});
        System.out.println();
        rotateSimple(3, 3, 3, new int[]{1, 2, 3}, new int[]{0, 1, 2, 3});
        System.out.println();
        rotateSimple(4, 3, 4, new int[]{1, 2, 3, 4}, new int[]{0, 1, 2, 3});

        rotateSimple(16, 4, 16, new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16},
                new int[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15});


        rotateSimple(515, 100000, 500, new int[]{29261, 80254, 86934, 3704, 76338,
                        96698, 47885, 88475, 65211, 65976, 75238, 58566, 28684, 20348, 45383,
                        58620, 48360, 99801, 51885, 82661, 83066, 14311, 24803, 99267, 21541,
                        93195, 21194, 20775, 64817, 42323, 7640, 10429, 38928, 94573, 30484,
                        15265, 7622, 78368, 3739, 72833, 60696, 95328, 31398, 5731, 15676, 93132,
                        64351, 64035, 9284, 32587, 46695, 92349, 46897, 87850, 7968, 84789, 81044,
                        45513, 5563, 62212, 87836, 13202, 88993, 26763, 24127, 19476, 42028, 31748,
                        14196, 62118, 4580, 91243, 73798, 52329, 96973, 89473, 61812, 77675, 69859,
                        71095, 10261, 32905, 79796, 57157, 20754, 87763, 41945, 1798, 33275, 63859,
                        80361, 37462, 93413, 69353, 64225, 17539, 5181, 22604, 49286, 19376, 1073,
                        70218, 26970, 74870, 38898, 23942, 80694, 710, 1617, 50552, 88156, 11877,
                        83457, 67951, 85386, 4210, 55713, 43682, 22359, 5340, 23893, 2720, 59153,
                        17305, 88424, 23377, 51195, 93604, 62332, 480, 29331, 79757, 87049, 56300,
                        54626, 25947, 96594, 35320, 26656, 98210, 2223, 31163, 26438, 85679, 99114,
                        28175, 89889, 71178, 88209, 12247, 76517, 12101, 31318, 35670, 45757, 19742,
                        75398, 96951, 29697, 54082, 13782, 75380, 33838, 831, 31679, 4815, 26777, 28272,
                        56486, 69784, 42833, 58709, 946, 85623, 44387, 59, 13797, 50627, 87589, 2005, 62874,
                        80457, 14105, 94191, 32478, 59861, 30284, 7876, 73163, 59981, 78309, 86945, 35360, 28498,
                        87775, 83390, 49664, 30903, 28014, 6150, 686, 70846, 81210, 17983, 56468, 41948, 34394, 86617,
                        92575, 21982, 88621, 71800, 2438, 19078, 82342, 34916, 95290, 12626, 59143, 68453, 88958, 37451,
                        71749, 24317, 82300, 59523, 24058, 31963, 90425, 52071, 54464, 7462, 39269, 35673, 25444,
                        12088, 93973, 76189, 98704, 86547, 98170, 3677, 74698, 16960, 22754, 57039, 51875, 34395,
                        86016, 11017, 19199, 74973, 64819, 90947, 15641, 63470, 66821, 39699, 95432, 73597, 91769,
                        49896, 81058, 31037, 1920, 22854, 43125, 12244, 99042, 58180, 15142, 13564, 61856, 89839,
                        30523, 961, 63230, 98749, 51708, 49245, 26117, 70906, 24218, 90935, 78205, 39858, 54404,
                        45025, 95908, 66187, 34974, 87677, 32434, 32383, 35065, 50706, 55236, 78189, 62949, 70630,
                        36369, 78091, 545, 14576, 67929, 47419, 15537, 31158, 46167, 67244, 96755, 72283, 54501,
                        37324, 79569, 32705, 77181, 50324, 94082, 73089, 16510, 45407, 77117, 65296, 77789, 12181,
                        16001, 49377, 6722, 78949, 36358, 59442, 73391, 36902, 74017, 41320, 84320, 5905, 88829,
                        46838, 89500, 1935, 19120, 44001, 39258, 98688, 93057, 32791, 49011, 3490, 22231, 81872,
                        48896, 99347, 47167, 26685, 27879, 79519, 92413, 34600, 74820, 28770, 94041, 48210, 65671,
                        84410, 5881, 66342, 90314, 11062, 13179, 96166, 12996, 32298, 40166, 52254, 47337, 49574,
                        85044, 12699, 53064, 7274, 94570, 18311, 22972, 58089, 61347, 50850, 37607, 53759, 1802,
                        12426, 82528, 12194, 60636, 64550, 96603, 66516, 30891, 3269, 93929, 60421, 99434, 6925,
                        9070, 55951, 59178, 56406, 5524, 60573, 69104, 74939, 84198, 80026, 93250, 7169, 38114,
                        54596, 74370, 92072, 24707, 76171, 4498, 7234, 88365, 81485, 71784, 84967, 64352, 19026,
                        4587, 58281, 79447, 20372, 65205, 88516, 92674, 40734, 44922, 98198, 17658, 30377, 89488,
                        1855, 10402, 99089, 25375, 64867, 70037, 99744, 56939, 94743, 75915, 77788, 1976, 64279,
                        75624, 90111, 65597, 39975, 9137, 70184, 98255, 88583, 6907, 79811, 93450, 99581, 36896,
                        38371, 14130, 54553, 85100, 3617, 72759, 11853, 19058, 98133, 76720, 89094, 97877, 50010,
                        188, 73791, 44149, 18515, 54421, 19772, 8626, 20017, 59746, 17762, 6552, 74353, 22696,
                        13459, 70515, 16145, 29391, 7411, 70868, 43520, 78315, 55967, 63488, 51074, 84171, 82545,
                        49206, 60890, 87990, 63434, 27251, 4529, 53576},
                new int[]{8, 323, 475, 409, 330, 282, 387, 133, 120, 424, 193, 425, 380, 99, 435, 107,
                        396, 506, 467, 64, 189, 242, 315, 110, 504, 396, 2, 143, 44, 425, 138, 52, 150,
                        16, 379, 480, 298, 251, 98, 335, 77, 208, 246, 457, 308, 83, 50, 106, 75, 434, 88,
                        264, 161, 320, 291, 150, 118, 293, 210, 162, 121, 266, 132, 271, 282, 511, 237, 497,
                        164, 252, 317, 241, 461, 480, 100, 254, 49, 67, 277, 124, 501, 365, 305, 147, 170, 81,
                        215, 206, 292, 425, 368, 413, 93, 417, 169, 375, 413, 323, 357, 494, 61, 160, 137, 7, 42,
                        155, 178, 91, 222, 455, 132, 209, 223, 437, 273, 310, 436, 405, 1, 130, 233, 287, 28, 326,
                        189, 114, 187, 5, 438, 29, 416, 416, 106, 39, 423, 149, 194, 3, 157, 416, 375, 290, 27, 83,
                        129, 218, 311, 482, 108, 229, 97, 341, 1, 125, 70, 108, 157, 257, 113, 80, 203, 14, 413, 310,
                        485, 238, 376, 164, 241, 18, 498, 101, 225, 442, 102, 355, 62, 330, 322, 171, 44, 337, 429, 46,
                        462, 499, 154, 21, 158, 184, 18, 362, 115, 431, 74, 86, 154, 450, 167, 312, 468, 67, 331, 96,
                        427, 433, 451, 489, 165, 175, 62, 209, 512, 492, 172, 377, 393, 243, 398, 37, 427, 417, 316,
                        460, 250, 390, 463, 405, 325, 115, 202, 195, 100, 18, 291, 12, 368, 144, 501, 450, 237, 481,
                        145, 234, 375, 317, 13, 253, 46, 329, 207, 390, 148, 8, 252, 398, 315, 200, 288, 125, 316, 408,
                        238, 333, 343, 446, 345, 114, 76, 248, 49, 230, 214, 194, 381, 74, 429, 395, 245, 392, 209, 369, 184,
                        357, 295, 437, 240, 95, 122, 446, 138, 355, 256, 293, 173, 84, 224, 435, 198, 217, 169, 165, 447, 300,
                        276, 314, 292, 190, 194, 22, 499, 320, 308, 169, 79, 88, 91, 236, 101, 130, 84, 239, 486, 340, 17, 144,
                        425, 158, 497, 25, 376, 151, 107, 308, 451, 384, 107, 228, 59, 218, 167, 476, 455, 476, 130, 19, 481, 221,
                        173, 67, 268, 257, 223, 239, 83, 157, 301, 508, 316, 283, 450, 177, 351, 43, 402, 287, 427, 427, 433, 403,
                        130, 2, 364, 71, 395, 411, 7, 362, 34, 180, 346, 303, 438, 55, 27, 6, 212, 245, 431, 445, 13, 283, 107, 281,
                        243, 427, 54, 155, 339, 404, 476, 469, 323, 242, 457, 204, 139, 465, 483, 90, 47, 314, 393, 402, 286, 338, 325,
                        416, 68, 241, 346, 514, 442, 371, 280, 170, 283, 251, 243, 107, 57, 121, 61, 381, 363, 436, 502, 419, 303,
                        387, 427, 350, 186, 305, 155, 390, 45, 480, 291, 114, 124, 122, 30, 51, 493, 310, 221, 261, 479, 381, 368, 21,
                        502, 347, 319, 268, 268, 223, 89, 56, 95, 1, 323, 199, 224, 478, 74, 269, 444, 365, 383, 53, 487, 330, 21, 383,
                        43, 242, 129, 7, 109, 415, 460, 13, 247, 182, 281, 0, 405, 371});*/

//        boatTrip(5, 2, 2, new int[]{1, 2, 1, 4, 3});
//        boatTrip(5, 1, 2, new int[]{1, 2, 1, 4, 1});

//        treeVars(7, 5, 11, 15, new int[]{-2, 2, 1}, new int[]{5, -6});
//        treeVars(7, 5, 11, 15, new int[]{1, 2, 3, 4, 0}, new int[]{0, -3, -5, -4});

//        betweenFunc(new int[]{2, 4}, new int[]{16, 32, 96});
//        betweenFunc(new int[]{2, 4}, new int[]{20, 40, 60});
//        betweenFunc(new int[]{1}, new int[]{100});//9

//        circleSave(5, 2, 1);
//        circleSave(20, 19, 7);
//        circleSave(9, 9, 1);
//        circleSave(9, 1, 9);
//        circleSave(499999999, 999999997, 2);
//        circleSave(3, 5, 2);
//        circleSave(3, 6, 2);

//        circleSave(499999999, 999999997, 2);
//        circleSave(499999999, 999999998, 2);
//        circleSave(999999999, 999999999, 1);

//        divisibleSum(new int[]{1, 3, 2, 6, 1, 2}, 3);
//        encrypt("if man was meant to stay on the ground god would have given us roots");
//        encrypt("abcdefghijklm");
//        encrypt("chillout");
//        stock(9, new int[]{15, 27, 14, 38, 26, 55, 46, 65, 85});
//        hourGlass(new int[][]{{1, 1, 1, 0, 0, 0}, {0, 1, 0, 0, 0, 0}, {1, 1, 1, 0, 0, 0}, {0, 0, 2, 4, 4, 0},
//                {0, 0, 0, 2, 0, 0}, {0, 0, 1, 2, 4, 0}});
//        queryif(2, 5, new int[][]{{1, 0, 5,}, {1, 1, 7}, {1, 0, 3}, {2, 1, 0}, {2, 1, 1}});
//        downquery(10, new int[]{0, 1, 2, 3, 4, 5, 7, 9, 27, 49});
//
        /*downquery(1000, new int[] {
            832057
                    , 396390
                    , 470929
                    , 8676
                    , 248888
                    , 760032
                    , 198567
                    , 26977
                    , 729442
                    , 294582
                    , 788784
                    , 837718
                    , 295949
                    , 628757
                    , 784508
                    , 16131
                    , 796707
                    , 504294
                    , 613688
                    , 948459
                    , 358946
                    , 56229
                    , 483297
                    , 995891
                    , 388527
                    , 524300
                    , 916632
                    , 185374
                    , 331552
                    , 209194
                    , 975620
                    , 924812
                    , 253510
                    , 219571
                    , 549345
                    , 793111
                    , 797731
                    , 170537
                    , 870754
                    , 161628
                    , 462742
                    , 43859
                    , 755406
                    , 370202
                    , 465179
                    , 444861
                    , 442758
                    , 534661
                    , 940269
                    , 316967
                    , 711974
                    , 59304
                    , 181602
                    , 165260
                    , 455302
                    , 204197
                    , 403395
                    , 642612
                    , 831830
                    , 300525
                    , 186567
                    , 4487
                    , 367838
                    , 415146
                    , 827849
                    , 266353
                    , 998955
                    , 331036
                    , 327129
                    , 149668
                    , 74830
                    , 220476
                    , 537358
                    , 569899
                    , 582949
                    , 612294
                    , 631567
                    , 306563
                    , 903264
                    , 786379
                    , 753165
                    , 879737
                    , 411018
                    , 959941
                    , 343009
                    , 377769
                    , 958515
                    , 690817
                    , 527494
                    , 426416
                    , 387002
                    , 313692
                    , 750533
                    , 454535
                    , 197560
                    , 608167
                    , 978888
                    , 472272
                    , 518198
                    , 202076
                    , 110788
                    , 405769
                    , 390777
                    , 192269
                    , 34352
                    , 761520
                    , 338030
                    , 107216
                    , 952045
                    , 990831
                    , 493835
                    , 673604
                    , 886148
                    , 652
                    , 997995
                    , 254223
                    , 107092
                    , 589195
                    , 388000
                    , 659121
                    , 901072
                    , 953232
                    , 772807
                    , 681975
                    , 422998
                    , 954385
                    , 28344
                    , 503441
                    , 927242
                    , 132899
                    , 852541
                    , 399816
                    , 287565
                    , 478373
                    , 987359
                    , 875982
                    , 803731
                    , 519730
                    , 766634
                    , 607313
                    , 578764
                    , 810734
                    , 223523
                    , 117713
                    , 505948
                    , 803991
                    , 930677
                    , 794775
                    , 609085
                    , 438557
                    , 32630
                    , 915059
                    , 605554
                    , 294480
                    , 560064
                    , 243530
                    , 31460
                    , 957161
                    , 150465
                    , 502746
                    , 32352
                    , 223685
                    , 34497
                    , 848637
                    , 283237
                    , 595538
                    , 479041
                    , 412857
                    , 395182
                    , 880454
                    , 731852
                    , 238547
                    , 61481
                    , 585728
                    , 320071
                    , 921082
                    , 560652
                    , 165372
                    , 65670
                    , 594354
                    , 188351
                    , 146594
                    , 848760
                    , 324881
                    , 475133
                    , 767533
                    , 667789
                    , 435243
                    , 433620
                    , 953242
                    , 225925
                    , 639
                    , 93147
                    , 205119
                    , 608582
                    , 707478
                    , 751538
                    , 810782
                    , 729201
                    , 753182
                    , 748137
                    , 509837
                    , 366907
                    , 515248
                    , 871613
                    , 79563
                    , 350688
                    , 49321
                    , 3225
                    , 917855
                    , 898754
                    , 987663
                    , 10657
                    , 11692
                    , 926715
                    , 887333
                    , 446416
                    , 582785
                    , 451389
                    , 25105
                    , 283965
                    , 357255
                    , 376338
                    , 331106
                    , 367746
                    , 910706
                    , 307540
                    , 409382
                    , 866529
                    , 443690
                    , 984176
                    , 208797
                    , 224682
                    , 199235
                    , 810263
                    , 439874
                    , 561222
                    , 193524
                    , 500258
                    , 805483
                    , 583136
                    , 902484
                    , 773559
                    , 655404
                    , 972454
                    , 474301
                    , 291125
                    , 124779
                    , 276295
                    , 821186
                    , 295968
                    , 815195
                    , 967714
                    , 859762
                    , 987379
                    , 383803
                    , 530195
                    , 801294
                    , 397957
                    , 69146
                    , 174405
                    , 92361
                    , 336825
                    , 240487
                    , 988687
                    , 238429
                    , 462337
                    , 281399
                    , 854124
                    , 917994
                    , 80703
                    , 332721
                    , 457839
                    , 297807
                    , 207685
                    , 339000
                    , 651179
                    , 816722
                    , 680750
                    , 398076
                    , 765280
                    , 897758
                    , 968162
                    , 842779
                    , 568484
                    , 663454
                    , 225106
                    , 113095
                    , 323197
                    , 416513
                    , 572536
                    , 931550
                    , 38559
                    , 660902
                    , 48094
                    , 61804
                    , 828229
                    , 934366
                    , 847616
                    , 493840
                    , 557146
                    , 293919
                    , 902249
                    , 854580
                    , 431634
                    , 716325
                    , 766317
                    , 631963
                    , 40694
                    , 637239
                    , 63200
                    , 589204
                    , 242577
                    , 282980
                    , 229870
                    , 824479
                    , 887464
                    , 979950
                    , 815560
                    , 961431
                    , 724876
                    , 39861
                    , 679759
                    , 548112
                    , 338671
                    , 379306
                    , 873628
                    , 938048
                    , 672229
                    , 884571
                    , 545884
                    , 795088
                    , 201316
                    , 222747
                    , 220961
                    , 811187
                    , 67129
                    , 718153
                    , 541508
                    , 908219
                    , 756470
                    , 224932
                    , 315306
                    , 993469
                    , 48151
                    , 31888
                    , 747717
                    , 848865
                    , 694219
                    , 299997
                    , 571048
                    , 312635
                    , 759517
                    , 960281
                    , 691211
                    , 921041
                    , 452175
                    , 214255
                    , 737090
                    , 526694
                    , 842372
                    , 274731
                    , 2051
                    , 497102
                    , 325567
                    , 526761
                    , 321410
                    , 237694
                    , 624098
                    , 448405
                    , 64850
                    , 853471
                    , 349558
                    , 574118
                    , 708008
                    , 636972
                    , 940462
                    , 947548
                    , 226663
                    , 737646
                    , 369065
                    , 584208
                    , 559229
                    , 828944
                    , 336400
                    , 475505
                    , 792950
                    , 431418
                    , 967951
                    , 804642
                    , 83395
                    , 729318
                    , 271346
                    , 858222
                    , 593711
                    , 584244
                    , 422858
                    , 387650
                    , 851982
                    , 979179
                    , 515085
                    , 271286
                    , 381165
                    , 346252
                    , 5127
                    , 292251
                    , 431649
                    , 328966
                    , 965096
                    , 397842
                    , 877087
                    , 383356
                    , 955687
                    , 870878
                    , 433927
                    , 587894
                    , 539050
                    , 55913
                    , 560739
                    , 788301
                    , 168869
                    , 951222
                    , 905235
                    , 265622
                    , 827082
                    , 222961
                    , 917547
                    , 787048
                    , 167282
                    , 10422
                    , 709578
                    , 433568
                    , 901331
                    , 70214
                    , 174152
                    , 613903
                    , 400297
                    , 667741
                    , 765327
                    , 444443
                    , 268350
                    , 524425
                    , 418723
                    , 218327
                    , 680940
                    , 550102
                    , 727641
                    , 97145
                    , 200136
                    , 874634
                    , 547487
                    , 79664
                    , 588895
                    , 13729
                    , 593102
                    , 168440
                    , 169976
                    , 724327
                    , 540532
                    , 248081
                    , 790602
                    , 858233
                    , 274820
                    , 215574
                    , 786784
                    , 884104
                    , 324841
                    , 682667
                    , 911980
                    , 513169
                    , 259106
                    , 727241
                    , 152970
                    , 731587
                    , 658740
                    , 816213
                    , 459698
                    , 116134
                    , 766525
                    , 8133
                    , 241603
                    , 683874
                    , 163668
                    , 642368
                    , 808804
                    , 10052
                    , 701318
                    , 783394
                    , 146976
                    , 207525
                    , 934251
                    , 809958
                    , 564426
                    , 925860
                    , 679962
                    , 371933
                    , 380326
                    , 821094
                    , 115632
                    , 897436
                    , 98809
                    , 456227
                    , 621295
                    , 401610
                    , 875670
                    , 810634
                    , 524919
                    , 120796
                    , 807970
                    , 325685
                    , 53435
                    , 243863
                    , 220032
                    , 438480
                    , 525683
                    , 577532
                    , 289046
                    , 386767
                    , 271602
                    , 80454
                    , 16954
                    , 40275
                    , 930348
                    , 69151
                    , 701730
                    , 508509
                    , 451498
                    , 569126
                    , 904104
                    , 730861
                    , 890457
                    , 729339
                    , 48555
                    , 564286
                    , 498016
                    , 779163
                    , 266771
                    , 4576
                    , 29970
                    , 616921
                    , 67186
                    , 500599
                    , 622942
                    , 642197
                    , 981930
                    , 653732
                    , 389304
                    , 855448
                    , 859297
                    , 596886
                    , 743675
                    , 422611
                    , 616885
                    , 669123
                    , 329737
                    , 284152
                    , 855204
                    , 469146
                    , 261816
                    , 39981
                    , 766768
                    , 954967
                    , 233603
                    , 510174
                    , 655674
                    , 114447
                    , 403602
                    , 959317
                    , 330844
                    , 910423
                    , 708454
                    , 515259
                    , 204771
                    , 528087
                    , 462012
                    , 496821
                    , 187605
                    , 793785
                    , 521046
                    , 232650
                    , 606023
                    , 964385
                    , 281433
                    , 878096
                    , 579274
                    , 143432
                    , 682750
                    , 404048
                    , 999094
                    , 586402
                    , 305034
                    , 65023
                    , 113051
                    , 575029
                    , 78216
                    , 217998
                    , 149636
                    , 878514
                    , 637660
                    , 869679
                    , 847881
                    , 838970
                    , 573844
                    , 895131
                    , 362869
                    , 353520
                    , 238086
                    , 824165
                    , 274824
                    , 530241
                    , 623610
                    , 499577
                    , 332998
                    , 705396
                    , 854380
                    , 867347
                    , 66811
                    , 6672
                    , 956791
                    , 193200
                    , 106108
                    , 726556
                    , 434987
                    , 789520
                    , 559285
                    , 623979
                    , 306910
                    , 946924
                    , 350641
                    , 183404
                    , 909473
                    , 570623
                    , 483573
                    , 784298
                    , 713625
                    , 686851
                    , 170189
                    , 248435
                    , 77146
                    , 674780
                    , 228989
                    , 106085
                    , 842316
                    , 145578
                    , 84190
                    , 692238
                    , 972270
                    , 178249
                    , 270512
                    , 162040
                    , 5892
                    , 55267
                    , 118165
                    , 390831
                    , 828685
                    , 557054
                    , 298566
                    , 399598
                    , 797214
                    , 623280
                    , 544431
                    , 277377
                    , 72511
                    , 488017
                    , 322360
                    , 192936
                    , 446738
                    , 418901
                    , 345169
                    , 329867
                    , 776656
                    , 605578
                    , 149081
                    , 545133
                    , 455778
                    , 953642
                    , 182455
                    , 928194
                    , 117560
                    , 340835
                    , 664829
                    , 632187
                    , 124694
                    , 893522
                    , 608795
                    , 717897
                    , 253749
                    , 750403
                    , 451090
                    , 742536
                    , 586138
                    , 369860
                    , 621399
                    , 720811
                    , 793000
                    , 512941
                    , 124835
                    , 562066
                    , 437663
                    , 592424
                    , 125763
                    , 282073
                    , 426463
                    , 5073
                    , 739713
                    , 982505
                    , 132190
                    , 900570
                    , 908590
                    , 724900
                    , 889590
                    , 372195
                    , 921527
                    , 96904
                    , 248183
                    , 131795
                    , 637997
                    , 956953
                    , 135778
                    , 106499
                    , 272476
                    , 270022
                    , 600882
                    , 225980
                    , 695759
                    , 429446
                    , 262695
                    , 349569
                    , 98525
                    , 727507
                    , 393597
                    , 888713
                    , 921699
                    , 82224
                    , 201421
                    , 657966
                    , 420442
                    , 214767
                    , 532983
                    , 985385
                    , 850940
                    , 244640
                    , 803491
                    , 609608
                    , 242150
                    , 838070
                    , 413183
                    , 644906
                    , 174780
                    , 35574
                    , 406505
                    , 170782
                    , 92552
                    , 220464
                    , 629612
                    , 641481
                    , 642595
                    , 2933
                    , 850345
                    , 772143
                    , 23324
                    , 537982
                    , 277488
                    , 982286
                    , 590848
                    , 310132
                    , 188598
                    , 333731
                    , 793768
                    , 346623
                    , 627084
                    , 34199
                    , 346574
                    , 573329
                    , 464689
                    , 52813
                    , 309187
                    , 456689
                    , 411153
                    , 207287
                    , 906767
                    , 260938
                    , 51776
                    , 494622
                    , 104007
                    , 514260
                    , 230312
                    , 552430
                    , 91815
                    , 163721
                    , 370525
                    , 516524
                    , 944047
                    , 499993
                    , 331923
                    , 215233
                    , 754269
                    , 37821
                    , 729491
                    , 623194
                    , 243292
                    , 965690
                    , 286361
                    , 264844
                    , 248061
                    , 793045
                    , 312277
                    , 534852
                    , 85379
                    , 451545
                    , 322893
                    , 663672
                    , 193878
                    , 519158
                    , 660223
                    , 521420
                    , 535695
                    , 918438
                    , 350585
                    , 74279
                    , 681214
                    , 423811
                    , 263706
                    , 586314
                    , 643606
                    , 174204
                    , 269063
                    , 751560
                    , 614489
                    , 403923
                    , 603157
                    , 7654
                    , 641106
                    , 860195
                    , 433066
                    , 417271
                    , 964915
                    , 55071
                    , 346342
                    , 213181
                    , 192888
                    , 778716
                    , 964372
                    , 596699
                    , 271520
                    , 503858
                    , 752849
                    , 650709
                    , 600771
                    , 532354
                    , 146138
                    , 100213
                    , 65163
                    , 759292
                    , 720083
                    , 12702
                    , 364780
                    , 441885
                    , 921004
                    , 514102
                    , 860354
                    , 857263
                    , 398009
                    , 505909
                    , 281413
                    , 693432
                    , 688036
                    , 898076
                    , 700565
                    , 308918
                    , 511344
                    , 320041
                    , 10514
                    , 820422
                    , 243789
                    , 156332
                    , 289486
                    , 701217
                    , 773598
                    , 771624
                    , 792351
                    , 521413
                    , 147831
                    , 87451
                    , 465504
                    , 194578
                    , 357745
                    , 231381
                    , 342790
                    , 369237
                    , 688767
                    , 525324
                    , 548014
                    , 690908
                    , 600879
                    , 639501
                    , 399096
                    , 838251
                    , 244066
                    , 736383
                    , 534650
                    , 909262
                    , 425385
                    , 776955
                    , 180138
                    , 544032
                    , 721736
                    , 656906
                    , 828114
                    , 878273
                    , 149649
                    , 255924
                    , 813768
                    , 44957
                    , 867037
                    , 90548
                    , 822983
                    , 39524
                    , 440062
                    , 846443
                    , 101532
                    , 62769
                    , 97178
                    , 127711
                    , 211464
                    , 434210
                    , 127772
                    , 946324
                    , 116859
                    , 613964
                    , 392787
                    , 967396
                    , 954731
                    , 81491
                    , 437923
                    , 199222
                    , 257977
                    , 616619
                    , 663080
                    , 494374
                    , 770009
                    , 484038
                    , 226432
                    , 793720
                    , 826205
                    , 869198
                    , 282222
                    , 465494
                    , 880081
                    , 38756
                    , 828972
                    , 356940
                    , 497058
                    , 264256
                    , 181686
                    , 759690
                    , 357004
                    , 172614
                    , 65888
                    , 378143
                    , 179306
                    , 188434
                    , 358486
                    , 93850
                    , 936062
                    , 984486
                    , 643183
                    , 510204
                    , 201188
                    , 681103
                    , 934873
                    , 483756
                    , 676890
                    , 196204
                    , 548160
                    , 797580
                    , 383794
                    , 922880
                    , 260537
                    , 676276
                    , 475667
                    , 891876
                    , 887243
                    , 854103
                    , 341778
                    , 530880
                    , 235030
                    , 58863
                    , 956499
                    , 642220
                    , 799519
                    , 137575
                    , 885363
                    , 744785
                    , 619311
                    , 178009
                    , 401070
                    , 449045
                    , 487535
                    , 774171
        });*/

//        romanizer(new int[]{75, 80, 99, 100, 50});
//        System.out.println(zombieCluster(new String[]{"10000", "01000", "00100", "00010", "00001"}));
        /*System.out.println(zombieCluster(new String[]{"1100",
                "0110",
                "1110",
                "0001"}));*/

//        downquery(1, new int[]{832057});
//        queueItUp(3, new long[][]{{1, 5}, {10, 3}, {3, 4}});


    }

    private void queueItUp(int n, long a[][]) {
        long c = 0;
        int x = -1;
        for (int i = 0; ; i++) {
            if ((i == n && x == 0) || x == i) {
                break;
            } else {
                if (i == n) {
                    i = 0;
                }
            }
            c = c + a[i][0] - a[i][1];
            if (c > 0) {
                if (x == -1) x = i;
            } else {
                x = -1;
            }
        }
        System.out.println(x);
    }

    private void downquery(long q, int a[]) {
        int n, count, sqrt, j, x;
        for (int i = 0; i < q; i++) {
            n = a[i];
            count = 0;
            if (n <= 3) {
                System.out.println(n);
                continue;
            }
//            sqrt = (int) Math.sqrt((double) n);
            x = n;
            sqrt = n;
            while (sqrt != -1) {
                j = sqrt;
                for (; j >= 3; j--) {
                    if (x % j == 0)
                        break;
                }
                if (j < 3) {
                    count += j;
                    sqrt = -1;
                } else {
                    sqrt = j/* (int) Math.sqrt((double) j)*/;
                    x = j;
                    count++;
                }
            }
            System.out.println(count);
        }
    }

    static int zombieCluster(String[] zombies) {
        int s = zombies.length;
        int a[] = new int[s], x = 0;
        Arrays.fill(a, 0);
        for (int i = 0; i < s; i++) {
            x = 1;
            for (int j = i; j < zombies[i].length(); j++) {
                if (j != i && zombies[i].charAt(j) == '1') {
                    if (x != 1) {
                        a[j] = 1;
                    }
                    x = 1;
                } else {
                    x = 0;
                }
            }
        }
        int c = a[0];
        for (int i = 1; i < s; i++) {
            if (a[i - 1] == 1 && a[i] == 1) {
            } else {
                c++;
            }
        }
        if (c == 0)
            return s;
        return c;
    }

    static String[] romanizer(int[] num) {
        int c = num.length, x;
        String temp;
        String[] res = new String[c];
        for (int i = 0; i < c; i++) {
            temp = "";
            if (num[i] == 1000) {
                res[i] = "M";
                continue;
            } else if (num[i] == 100) {
                res[i] = "C";
                continue;
            } else if (num[i] > 100) {
                x = num[i] / 100;
                num[i] = num[i] % 100;
                if (x < 4) {
                    temp = new String(new char[x]).replace("\0", "C");
                } else if (x == 4) {
                    temp = "CD";
                } else if (x == 5) {
                    temp = "D";
                } else if (x == 9) {
                    temp = "CM";
                } else if (x < 9) {
                    temp = "D" + new String(new char[x - 5]).replace("\0", "C");
                }
            }
            if (num[i] == 10) {
                res[i] = temp + "X";
                continue;
            } else if (num[i] > 10) {
                x = num[i] / 10;
                num[i] = num[i] % 10;
                if (x < 4) {
                    temp = temp + new String(new char[x]).replace("\0", "X");
                } else if (x == 4) {
                    temp = temp + "XL";
                } else if (x == 5) {
                    temp = temp + "L";
                } else if (x == 9) {
                    temp = temp + "XC";
                } else if (x < 9) {
                    temp = temp + "L" + new String(new char[x - 5]).replace("\0", "X");
                }
            }
            x = num[i];
            if (x < 4) {
                temp = temp + new String(new char[x]).replace("\0", "I");
            } else if (x == 4) {
                temp = temp + "IV";
            } else if (x == 5) {
                temp = temp + "V";
            } else if (x == 9) {
                temp = temp + "IX";
            } else if (x < 9) {
                temp = temp + "V" + new String(new char[x - 5]).replace("\0", "I");
            }
            res[i] = temp;
        }

        for (int i = 0; i < c; i++) {
            System.out.println(res[i]);
        }
        return res;
    }

    private void queryif(int n, int q, int[][] a) {
        /*long[][] s = new long[n][2];
        int index;
        long x, y, lastAns = 0;
        int type;
        for (int i = 0; i < q; i++) {
            type = sc.nextInt();
            x = sc.nextLong();
            y = sc.nextLong();
            index = (int) ((x ^ lastAns) % n);
            if (type == 1) {
                s[index][0] = y;
            } else {
                lastAns = s[index][(int) y % s.length];
                System.out.println(lastAns);
            }
        }*/


        ArrayList<Long>[] s = new ArrayList[n];
        int index;
        long x, y, lastAns = 0;
        int type;
        for (int i = 0; i < q; i++) {
            type = a[i][0];
            x = a[i][1];
            y = a[i][2];
            index = (int) ((x ^ lastAns) % n);
            if (type == 1) {
                if (s[index] == null) {
                    s[index] = new ArrayList<>();
                }
                s[index].add(y);
            } else {
                lastAns = s[index].get((int) y % s[index].size());
                System.out.println(lastAns);
            }
        }

    }

    private void hourGlass(int arr[][]) {
        int sum;
        int maxSum = -100;
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                sum = arr[i][j] + arr[i][j + 1] + arr[i][j + 2] +
                        arr[i + 1][j + 1] +
                        arr[i + 2][j] + arr[i + 2][j + 1] + arr[i + 2][j + 2];
                if (maxSum == -100 || maxSum < sum) {
                    maxSum = sum;
                }
            }
        }
        System.out.print(maxSum);
    }

    private void stock(int n, int[] arr) {
        int a[] = new int[n];
        int i, j, max = 0, val;

        for (i = 0; i < n; i++)
            a[i] = 1;

        for (i = n - 2; i >= 0; i--) {
            for (j = n - 1; j >= i; j--)
                if (arr[i] < arr[j] && a[i] < a[j] + 1) {
                    a[i] = a[i] + 1;
                }
        }
        for (i = 0; i < n; i++)
            if (a[max] < a[i])
                max = i;

        System.out.println(a[max]);
        val = arr[max];
        System.out.println(val);
        for (i = max; i < arr.length; i++) {
            if (arr[i] > val) {
                System.out.println(arr[i]);
                val = arr[i];
            }
        }
    }

    /*private void stock(int n, int a[]) {
        int s = 0, p1 = 0, p2 = 0, p3 = 0;
        for (int i = 0; i < n; i++) {
            if (i == 0) {
                //Do nothing
            } else if (a[i] > a[i - 1]) {
                s = i;
            } else {
                if ((s - p3) > (p2 - p1)) {
                    p1 = p3;
                    p2 = s;
                }
                p3 = i + 1;
            }
        }
        System.out.println(p2 - p1);
        for (int i = p1; i < p2; i++) {
            System.out.println(a[i]);
        }
    }*/


    private void encrypt(String line) {
        String result = "";
        line = line.replaceAll(" ", "");
        int l = line.length(), r, c, x;
        double sqrt = Math.sqrt(l);
        r = (int) Math.floor(sqrt);
        c = (int) Math.ceil(sqrt);
        if ((r * c) < l) {
            if (r * (c + 1) > (r + 1) * c) {
                c++;
            } else {
                r++;
            }
        }
        System.out.println(l + "  " + r + "   " + c + "   " + sqrt);
        for (int i = 0; i < c; i++) {
            for (int j = 0; j < r; j++) {
                x = i + (j * c);
                if (x < l) {
                    result += line.charAt(x);
                }
            }
            result += " ";
        }
        System.out.println(result);
    }

    private void countRepeat(long n, String s) {
        long c = 0, c1 = 0, x = n % (s.length());
        int i = 0;
        for (; i < s.length() && i < n; i++) {
            if (i == x) {
                c1 = c;
            }
            if (s.charAt(i) == 'a') {
                c++;
            }
        }
        if (i != n) {
            x = (long) (n / (s.length()));
            c = (x == 0 ? (c + c1) : (x * c + c1));
        }
        System.out.println(c);
    }

    private void cutSticks(int[] a) {
        int i = 0, x = 0;
        while (i < a.length - 1) {
            while ((a[i] - x) == 0) {
                i++;
            }
            System.out.println((a.length - i));
            x = a[i];
        }
    }

    private void divisibleSum(int[] a, int k) {
        int[] remainder = new int[100];
        Arrays.fill(remainder, 0);
        int c = 0, x;
        for (int a_i = 0; a_i < a.length; a_i++) {
            remainder[a[a_i] % k]++;
        }
        for (int a_i = 0; a_i < a.length; a_i++) {
            if (remainder[a[a_i]] != 0) {
                c++;
            }
        }
        System.out.println(c);
    }

    private void dateCompare(int d1, int m1, int y1, int d2, int m2, int y2) {
        if (y2 > y1) {
            System.out.println(0);
            System.exit(0);
        } else if (y1 > y2) {
            System.out.println(10000);
            System.exit(0);
        } else {
            if (m2 > m1) {
                System.out.println(0);
                System.exit(0);
            } else if (m1 > m2) {
                System.out.println(500 * (m1 - m2));
                System.exit(0);
            } else {
                if (d2 >= d1) {
                    System.out.println(0);
                    System.exit(0);
                } else if (d1 > d2) {
                    System.out.println(15 * (d1 - d2));
                    System.exit(0);
                }
            }
        }
    }

    private void sqrRange(int a, int b) {
        /**
         * Why this works
         * We take floor of sqrt(b) because we need to consider
         numbers before b.

         We take ceil of sqrt(a) because we need to consider
         numbers after a.
         */
        int c = 0;
        double x;
        for (int i = a; i <= b; i++)

            c = (int) (Math.floor(Math.sqrt(b)) - Math.ceil(Math.sqrt(a)) + 1);

        System.out.println(c);
    }

    public void digits(int x) {
        int n = x, digit, count = 0;
        while (n != 0) {
            digit = n % 10;
            if (digit != 0 && x % digit == 0) {
                count++;
            }
            n = n / 10;
        }
        System.out.println(count);
    }

    private void cloudType(int n, int k, int[] y) {
        int e = 100;
        int x = 0;
        for (int c_i = 0; c_i < n; c_i++) {
            if (x == 0 && y[c_i] == 1) {
                x = 1;
                e -= 3;
            } else if (x == 1 && y[c_i] == 0) {
                x = 0;
                e -= 1;
            }

        }

        System.out.println(e);
    }

    private void circleSave(int n, int m, int s) {
        if ((m == 1 && s == n) || (s == 1 && m == n)) {
            System.out.println(n);
            System.exit(0);
        }
        int x = m + s;
        if (n < x) {
            x = x % n;
        }
        System.out.println((x - 1 == 0 ? n : x - 1));
    }

    private void removeArDuplicate(int n, int[] a) {
        int x;
        Set<Integer> set = new HashSet<>();
        for (int c_i = 0; c_i < n; c_i++) {
            x = a[c_i];
            if (set.contains(x)) {
                set.remove(x);
            } else {
                set.add(x);
            }
        }
        System.out.println((n - set.size()) / 2);
    }

    public static void primeFactors(int n) {
        // Print the number of 2s that divide n
        while (n % 2 == 0) {
            System.out.print(2 + " ");
            n /= 2;
        }

        // n must be odd at this point.  So we can
        // skip one element (Note i = i +2)
        for (int i = 3; i <= Math.sqrt(n); i += 2) {
            // While i divides n, print i and divide n
            while (n % i == 0) {
                System.out.print(i + " ");
                n /= i;
            }
        }

        // This condition is to handle the case whien
        // n is a prime number greater than 2
        if (n > 2)
            System.out.print(n);
    }

    private int factors(int start, int end) {
        int count = -1;
        int i = start;
        if (i == 1) {
            i++;
        }
        for (; i < end; i += start) {
            if (end % i == 0 && i % start == 0) {
                count++;
            }
        }
        return count;
    }

    private void betweenFunc(int[] a, int[] b) {
        int maxA = 0, minB = 0;
        int count1 = 0, count2 = 0;
        int x;
        for (int a_i = 0; a_i < a.length; a_i++) {
            x = a[a_i];
            if (maxA == 0) {
                maxA = x;
            }
            if (x > maxA) {
                if (x % maxA == 0) {
                    maxA = x;
                    count1 = 0;
                } else {
                    maxA = 0;
                    count1 = 0;
                    break;
                }
            } else if (x < maxA) {
                if (maxA % x != 0) {
                    maxA = 0;
                    count1 = 0;
                    break;
                }
            } else {
                count1++;
            }
        }
        if (maxA != 0) {
            count1++;
            for (int b_i = 0; b_i < b.length; b_i++) {
                x = b[b_i];

                if (x % maxA == 0) {
                    if (minB == 0) {
                        minB = x;
                    }
                    if (x < minB) {
                        if (minB % x == 0) {
                            minB = x;
                            count2 = 0;
                        } else {
                            minB = 0;
                            count2 = 0;
                            break;
                        }
                    } else if (x > minB) {
                        if (x % minB != 0) {
                            minB = 0;
                            count2 = 0;
                            break;
                        }
                    } else {
                        count2++;
                    }
                } else {
                    count1 = 0;
                    break;
                }
            }
        } else {
            count1 = 0;
        }
        int result = 0;
        if (minB != 0) {
            result = count1 * count2;
            if (result == 1) {
                result++;
            }
            if (result != 0 && minB % maxA == 0) {
                result += factors(maxA, minB);
            }
        }
//        System.out.println(maxA + "       " + minB + "    " + count1 + "     " + count2);
        System.out.println(result);
    }

    private void speedMatchSeries(int x1, int x2, int v1, int v2) {
        //x1+n*v1=x2+n*v2   =>  x1-x2=n*(v2-v1) =>
        if ((x1 > x2 && v1 > v2) || (x2 > x1 && v2 > v1) || (x1 > x2 && v1 == v2) || (x2 > x1 && v1 == v2)) {
            System.out.println("NO");
            System.exit(0);
        }
        if (x1 == x2) {
            System.out.println("YES");
            System.exit(0);
        }
        int d1 = (x1 - x2);
        int d2 = (v2 - v1);
        if (d1 % d2 == 0) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }

    private void treeVars(int s, int a, int t, int b, int ap[], int or[]) {
        int counta = 0;
        int d1 = (s - a);
        int d2 = (s - b);
        int d3 = (t - a);
        int d4 = (t - b);
        int x;
        for (int apple_i = 0; apple_i < ap.length; apple_i++) {
            x = ap[apple_i];
            if (x >= 0 && x >= d1 && x <= d3) {
                counta++;
            }
        }
        int counto = 0;
        for (int orange_i = 0; orange_i < or.length; orange_i++) {
            x = or[orange_i];
            if (x <= 0 && x >= d2 && x <= d4) {
                counto++;
            }
        }
        System.out.println(counta + "\n" + counto);
    }

    private void boatTrip(int n, int c, int m, int[] p) {
        int s = 0;
        boolean isPossible = true;
        for (int p_i = 0; p_i < n; p_i++) {
            s += p[p_i];
            if (p[p_i] - (m * c) > 0) {
                isPossible = false;
                break;
            }
        }
        if (isPossible) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }

    private void rotateSimple(int n, int k, int q, int[] a, int[] m) {
        int b[] = new int[a.length];
        int c;
        if (k > (n * 2)) {
            c = (-k + (n * ((k / n) + 1)));
        } else {
            c = -k + n;
        }
        for (int a0 = 0; a0 < q; a0++) {
            b[(a0 + k) % n] = a[a0];
        }
        for (int a0 = 0; a0 < q; a0++) {
            try {
                System.out.println(a[(m[a0] + c) % n] + "    " + b[m[a0]]);
            } catch (ArrayIndexOutOfBoundsException e) {
                System.out.println(k + "  " + n * 195 + "   " + (-k + (n * ((k / n) + 1))) + "  " + (m[a0] - k + (n * (k / n))) + "    " + (m[a0] - k + (n * (k / n))) % n);
                break;
            }
        }
    }

    /**
     * TODO Hackerearth
     */
    private void prime(String str) {
        /*char[] ch = str.toCharArray();
        int arr[] = {67, 71, 73, 79, 83, 89};
        int j = 0;
        for (int i = 0; i < ch.length; i++) {
            for()
            if(ch[i]==arr[i])
        }*/
    }

    private void timeConverter(String time) {
        int a;
        if (time.charAt(time.length() - 2) == 'P' || time.charAt(time.length() - 2) == 'p') {
            a = Integer.parseInt(time.substring(0, 2));
            if (a == 12) {
                time = "12" + time.substring(2, time.length() - 2);
            } else {
                time = (a + 12) + time.substring(2, time.length() - 2);
            }
        } else {
            a = Integer.parseInt(time.substring(0, 2));
            if (a == 12) {
                time = "00" + time.substring(2, time.length() - 2);
            } else {
                time = time.substring(0, time.length() - 2);
            }
        }
        System.out.println(time);
    }

    public int reverseNumber(int number) {

        int reverse = 0;
        while (number != 0) {
            reverse = (reverse * 10) + (number % 10);
            number = number / 10;
        }
        return reverse;
    }

    private void bigIntUse(int n) {
        BigInteger fact = BigInteger.valueOf(n);
        for (int i = n - 1; i > 1; i--) {
            fact = fact.multiply(BigInteger.valueOf(i));
        }
    }

    private void scannerTest() {
        Scanner sc = new Scanner(System.in);
        int l = sc.nextInt();
        int r = sc.nextInt();
        int k = sc.nextInt();
        if (l == r && l % k != 0) {
            System.out.println(0);
            System.exit(0);
        }
        int start;
        String string = "";
        String.format(string, "##.###");
        if (l % k == 0) {
            start = l;
        } else {
            start = l + k - (l % k);
        }
        int count = 0;

        for (int i = start; i <= r; i = i + k) {
            count++;
        }
        System.out.println(count);
    }

    private void factorial(int N) {
        long fact = N;
        for (int i = N - 1; i > 1; i--) {
            fact = fact * i;
        }
        System.out.println(fact);
        /*Scanner scanner = new Scanner(System.in);
        N = scanner.nextInt();*/
    }

    private void pictureMessage(BufferedReader br) {
        /*int L = Integer.parseInt(br.readLine());
        br.readLine();
        String[] ch;
        int w, h;
        String line;
        while ((line = br.readLine()) != null) {
            ch = line.split(" ");
            w = Integer.parseInt(ch[0]);
            h = Integer.parseInt(ch[1]);
            if (w < L || h < L) {
                System.out.println("UPLOAD ANOTHER");
            } else if (w == h) {
                System.out.println("ACCEPTED");
            } else {
                System.out.println("CROP IT");
            }
        }*/
    }

    private void relTimePrinting() {
        /*int i;
        String line;
        while ((line = br.readLine()) != null) {
            if (Integer.parseInt(line) == 42) {
                break;
            }
            System.out.println(line);
        }*/
    }

    private void countDivisor(String str) {
        String[] lrk = str.split(" ");
        int l = Integer.parseInt(lrk[0]);
        int r = Integer.parseInt(lrk[1]);
        int k = Integer.parseInt(lrk[2]);
        /*******Case added*********/
        if (l == r && l % k != 0) {
            System.out.println(0);
            System.exit(0);
        }
        /***************/


        int start;
        if (l % k == 0) {
            start = l;
        } else {
            start = l + k - (l % k);
        }
        int count = 0;

        for (int i = start; i <= r; i = i + k) {
            count++;
        }
        System.out.println(count);
    }

    private void palindromeS(String str) {
        char[] ch = str.toCharArray();
        int length = ch.length;
        String is = "YES";
        for (int i = 0; i < length / 2; i++) {
            if (ch[i] != ch[length - i - 1]) {
                is = "NO";
                break;
            }
        }
        System.out.println(is);
        /**
         * Approach 2
         *
         * while(first<last)
         */
    }

    private void toggleS(String str) {
        char[] ch = str.toCharArray();
        int length = ch.length;
        String is = "true";
        for (int i = 0; i < length / 2; i++) {
            if (ch[i] != ch[length - i - 1]) {
                is = "false";
                break;
            }
        }
        System.out.println(is);
    }

    private void multiplyMath(String str) {
        String[] stra = str.split(" ");
        double ans = 1d;
        int multiply = (int) Math.pow(10, 9) + 7;
        for (String aStra : stra) {
            ans = (ans * Integer.parseInt(aStra) % multiply);
        }
        System.out.println((int) ans);
    }

}