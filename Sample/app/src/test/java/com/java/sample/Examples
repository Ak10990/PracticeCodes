public class Examples {

    @Test
    public void countingValleys(int n, String s) {
        int valley = 0, cur = 0;
        int len = s.length();
        for (int i = 0; i < len; i++) {
            if (s.charAt(i) == 'U') {
                cur++;
            } else {
                cur--;
                if (cur == -1) valley++;
            }
        }

        return valley;

    }

    @Test
    public void jumpingOnClouds(int[] c) {
        int len = c.length, jumps = 0;
        if (len == 2) {
            jumps = 1;
        } else {
            for (int i = 0; i < len - 2; ) {
                if (c[i + 2] == 0)
                    i = i + 2;
                else
                    i++;
                jumps++;
                if (i == len - 2) {
                    jumps++;
                }
            }
        }

        return jumps;

    }

    @Test
    public void minimumBribes(int[] q) {
        int len = q.length, count = 0, x;
        for (int i = 0; i < len - 1; i++) {
            if (q[i] - i > 3) {
                count = -1;
                break;
            }
            if (q[i] - 1 > i) {
                x = q[i] - 1 - i;
                if (x == 2)
                    count += 2;
                else if (Math.abs(q[i] - q[i + 1]) == 1 || q[i + 1] % 2 == (i + 1) % 2)
                    count += 1;
                else count += 2;
            } else if (q[i] > q[i + 1]) {
                x = q[i] - q[i + 1] - 1;
                if (x == 0) count++;
                else count += x;
            }
        }
        if (count == -1)
            System.out.println("Too chaotic");
        else
            System.out.println(count);

        //else if (i < len - 2 && )

    }

    @Test
    public long arrayManipulation(int n, int[][] queries) {
        long arr[] = new long[n], max = 0;
        int t = queries.length;

        for (int i = 0; i < t; i++) {
            for (int j = queries[i][0] - 1; j < queries[i][1]; j++) {
                arr[j] += queries[i][2];
                if (arr[j] > max)
                    max = arr[j];
            }
        }
        return max;
    }

    @Test
    public int makeAnagram(String a, String b) {
        int la = a.length(), lb = b.length(), min = la > lb ? lb : la, i = 0, delC = 0;
        int[][] alpha = new int[2][26];
        for (; i < min; i++) {
            alpha[0][a.charAt(i) - 97] += 1;
            alpha[1][b.charAt(i) - 97] += 1;
        }
        if (la != lb) {
            if (min == la) {
                for (; i < lb; i++) {
                    alpha[1][b.charAt(i) - 97] += 1;
                }
            } else {
                for (; i < la; i++) {
                    alpha[0][a.charAt(i) - 97] += 1;
                }
            }
        }
        for (int j = 0; j < 26; j++) {
            delC += Math.abs(alpha[0][j] - alpha[1][j]);
        }
        return delC;
    }

    @Test
    public int alternatingCharacters(String s) {
        int len = s.length();
        int a = 0, b = 0, delC = 0;
        for (int i = 0; i < len; i++) {
            if (s.charAt(i) == 'A') {
                b = 0;
                if (a > 0) delC++;
                a++;
            } else {
                a = 0;
                if (b > 0) delC++;
                b++;
            }
        }
        return delC;
    }

    @Test
    public String isValid(String s) {
        int len = s.length(), x, max1 = 0, max2 = 0, c1 = 0, c2 = 0;
        int[] alpha = new int[26];
        if (len == 1) return "YES";
        for (int i = 0; i < len; i++) {
            x = s.charAt(i) - 97;
            alpha[x] += 1;
        }
        for (int i = 0; i < 26; i++) {
            if (alpha[i] != 0) {
                if (max1 == 0) {
                    max1 = alpha[i];
                    c1 = 1;
                } else if (max1 == alpha[i]) {
                    c1++;
                } else if (max2 == alpha[i]) {
                    c2++;
                } else if (max1 < alpha[i] && max2 == 0) {
                    max2 = max1;
                    c2 = c1;
                    c1 = 1;
                    max1 = alpha[i];
                } else if (max2 == 0) {
                    c2 = 1;
                    max2 = alpha[i];
                } else {
                    return "NO";
                }
            }
        }
        if ((max1 - max2 == 1 && c1 == 1) || max2 == 0 || (max2 == 1 && c2 == 1))
            return "YES";
        else return "NO";
    }
//                else if (max1 != max2 && max2 != 1 && 1 == alpha[i]) c11++;
//        if ((c11 == 0 && c1 == 1 && (max1 - max2) == 1) || (c11 == 1 && max1 == max2) || (max2 == 1 && c2 == 1))


}